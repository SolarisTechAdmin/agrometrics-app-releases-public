# Arquivo: .github/workflows/sync_last_release.yml
name: Sync Latest Release Asset to Public Repo

# A Action só roda quando uma nova release é publicada no repo privado
on:
  release:
    types: [published] # Garante que só roda quando a Release é completa e publicada.

jobs:
  sync_latest_release:
    runs-on: ubuntu-latest

    # Variáveis que serão usadas no script
    env:
      TARGET_REPO_NAME: 'meu-saas-public-releases' # <--- MUDE PARA O NOME EXATO DO SEU REPO PÚBLICO
      TARGET_REPO_OWNER: ${{ github.repository_owner }} # Assume o mesmo dono, mude se for diferente (ex: uma Organization)

    steps:
      - name: '1. Configura ambiente Git'
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"

      # A Action 'actions/checkout' padrão é suficiente para este passo
      # O asset da release já estará disponível no contexto
      # Não precisamos dar checkout no repo privado, apenas no público
      
      - name: '2. Busca dados da última Release'
        id: get_release_info
        # Use o curl para chamar a API e obter a URL do download do asset
        # Filtra o asset da Release (assumindo que você tem um arquivo APK/EXE/ZIP por release)
        run: |
          # Pega a URL da API da última release (dados do evento)
          RELEASE_API_URL="${{ github.event.release.url }}"
          
          # Pega o primeiro asset (arquivo) da Release. Ajuste se tiver múltiplos.
          ASSET_URL=$(curl -sL \
            -H "Accept: application/vnd.github.v3+json" \
            "${RELEASE_API_URL}" \
            | jq -r '.assets[0].url')
            
          # Pega o nome do arquivo (asset)
          ASSET_NAME=$(curl -sL \
            -H "Accept: application/vnd.github.v3+json" \
            "${RELEASE_API_URL}" \
            | jq -r '.assets[0].name')

          # Verifica se encontrou algo e salva nas outputs
          if [ -z "$ASSET_URL" ] || [ "$ASSET_URL" == "null" ]; then
            echo "::error::Não encontrou assets na última release!"
            exit 1
          fi

          echo "ASSET_URL=$ASSET_URL" >> $GITHUB_OUTPUT
          echo "ASSET_NAME=$ASSET_NAME" >> $GITHUB_OUTPUT
        shell: bash
        # O 'jq' é uma ferramenta linux para processar JSON, já está na maioria dos runners do GitHub Actions
        
      - name: '3. Baixa o arquivo do Asset da Release'
        run: |
          # A URL de download do asset exige um token, usamos o token padrão do Job
          curl -LJO \
            -H "Accept: application/octet-stream" \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "${{ steps.get_release_info.outputs.ASSET_URL }}"

      - name: '4. Clona o Repositório Público (Alvo)'
        # Usa o PAT para ter permissão de escrita no TARGET_REPO
        run: |
          TARGET_URL="https://${{ secrets.PAT_PUBLIC_REPO }}@github.com/${{ env.TARGET_REPO_OWNER }}/${{ env.TARGET_REPO_NAME }}.git"
          git clone "${TARGET_URL}" public-mirror

      - name: '5. Limpa e Copia a nova Release'
        run: |
          cd public-mirror
          
          # Remove todos os arquivos .apk, .zip, .exe etc. antigos
          # Isso garante que apenas a ÚLTIMA release estará lá
          find . -maxdepth 1 -type f -name "*.zip" -delete 
          find . -maxdepth 1 -type f -name "*.apk" -delete
          find . -maxdepth 1 -type f -name "*.exe" -delete
          # Adicione ou ajuste as extensões dos seus arquivos de release

          # Copia o novo arquivo baixado (que está no root do workspace)
          cp "../${{ steps.get_release_info.outputs.ASSET_NAME }}" .

      - name: '6. Commit e Push para o Repositório Público'
        run: |
          cd public-mirror
          
          git add .
          
          # Verifica se há algo para commitar antes de tentar commitar/pushar
          if ! git diff-index --quiet HEAD; then
            git commit -m " Auto-Sync: Latest Release ${{ github.event.release.tag_name }} on ${{ github.ref_name }}"
            # Faz o push usando o token no URL (já configurado no clone)
            git push 
          else
            echo "Nenhuma mudança de arquivo detectada, pulando commit/push."
          fi